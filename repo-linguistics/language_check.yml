name: List Repository Languages
on:
  # workflow_dispatch:
  workflow_call:
    inputs:
      repo-urls:
        description: 'List of Repository URLs (comma-separated)'
        required: true
        default: ''
        type: string
      use-secret-patLang:
        description: 'Use PAT? secrets.PATLANG'
        required: false
        default: false
        type: boolean
      scan-branches:
        description: 'Scan Branches'
        required: false
        default: false
        type: boolean
      csv-gen:
        description: 'Generate CSV File'
        required: false
        default: false
        type: boolean  
    secrets:
      PATLANG:
        required: false

jobs:
  list-languages:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Depends
        id: depends
        run: |
          if [[ ${{ inputs.scan-branches }} == true ]]; then
            sudo apt-get install build-essential cmake pkg-config libicu-dev zlib1g-dev libcurl4-openssl-dev libssl-dev ruby-dev
            sudo gem install github-linguist
            echo "Owner/Branch,Language,Percentage" > /tmp/output.csv
          else
            echo "Branches not selected - nothing to do"
          fi

      - name: Run payload from URLs
        id: extract
        run: |
          echo "----" >> $GITHUB_STEP_SUMMARY
          echo "**Owner/Repository Language Report**" >> $GITHUB_STEP_SUMMARY
          IFS=',' read -ra URLS <<< "${{ inputs.repo-urls }}"
          declare -a FORMATTED_RESULTS=()
          for URL in "${URLS[@]}"; do
            # Extract owner and repo from the URL
            OWNER=$(echo $URL | awk -F/ '{print $4}')
            REPO=$(echo $URL | awk -F/ '{print $5}')

            # Get repository languages
            if [[ ${{ inputs.use-secret-patLang }} == true ]]; then
              RESPONSE=$(curl -s -L \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer ${{ secrets.PATLANG }}" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                https://api.github.com/repos/$OWNER/$REPO/languages)
            else
              RESPONSE=$(curl -s -L \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                https://api.github.com/repos/$OWNER/$REPO/languages)
            fi

            if [[ "$RESPONSE" == *'Bad credentials'* ]]; then
              echo "\`\`\`json" > error.md
              echo "$RESPONSE" >> error.md
              echo "" >> error.md
              echo "\`\`\`" >> error.md
              cat error.md >> $GITHUB_STEP_SUMMARY
              exit 1
            fi

            # Check if the response is an array, as expected
              # Calculate the total lines of code
              total_lines=$(echo "$RESPONSE" | jq 'values | add')

            # Check null for language
              if [[ "$total_lines" == *"null"* ]]; then
                echo "\`$OWNER/$REPO\`: Language not identified"
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "[\`\`\`$OWNER/$REPO\`\`\`]($URL)<br>" >> $GITHUB_STEP_SUMMARY
                echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
                echo "Language not identified" >> $GITHUB_STEP_SUMMARY
                echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
                continue
              fi

              # Format repository languages
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "[\`\`\`$OWNER/$REPO\`\`\`]($URL)" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`yml" >> $GITHUB_STEP_SUMMARY
              echo "$RESPONSE" | jq -r 'to_entries[] | "\(.key): \(.value / '"$total_lines"' * 100.0)%"' | while read line; do
                echo "$line"
                language=$(echo "$line" | awk -F ': ' '{print $1}')
                percentage=$(echo "$line" | awk -F': ' '{printf "%.2f",$2}')
                FORMATTED_RESULTS=$(printf "%s: %s%%\n" "$language" "$percentage")
                echo $FORMATTED_RESULTS >> $GITHUB_STEP_SUMMARY
              done
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

              # Scan Branches using github-linguist
              if [[ ${{ inputs.scan-branches }} == true ]]; then
                git clone https://github.com/$OWNER/$REPO.git
                cd $REPO
                BRANCHES=$(git branch -r | grep -v HEAD | sed 's/origin\///' | jq -R -s -c 'split("\n")[:-1]' | jq -r '.[]')
                SUMMARY=""
                echo "\`\`\`yml" >> $GITHUB_STEP_SUMMARY
                echo "Branch Summary" >> $GITHUB_STEP_SUMMARY
                for branch in $(echo "${BRANCHES}"); do
                  echo "Checking out branch $branch"
                  branch=$(echo "$branch" | xargs)
                  git checkout $branch
                  LINGUIST_OUTPUT=$(github-linguist --json)
                  if [[ ${{ inputs.csv-gen }} == true ]]; then
                    echo $LINGUIST_OUTPUT | jq -r --arg branch "$OWNER/$REPO/$branch" 'to_entries[] | [$branch, .key, .value.percentage] | @csv' >> /tmp/output.csv
                  else
                    echo "CSV option not selected - nothing to do."
                  fi  
                  echo "$branch:" >> $GITHUB_STEP_SUMMARY
                  branch_lang=$(echo "$LINGUIST_OUTPUT" | jq -r 'keys[]')
                  lang_percentage=$(echo "$LINGUIST_OUTPUT" | jq -r '.[] | .percentage')
                  FORMATTED_BRESULTS=""
                  for lang in $(echo "${branch_lang}"); do
                    lang_percentage=$(echo "$LINGUIST_OUTPUT" | jq -r --arg lang "$lang" '.[$lang].percentage')
                    FORMATTED_BRESULTS+="- $lang $lang_percentage%\n"  
                  done
                  echo -e $FORMATTED_BRESULTS >> $GITHUB_STEP_SUMMARY
                done
                echo "$(echo $SUMMARY)"
                echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              else
                echo "Branches not selected - nothing to do"
              fi

              # Export Results
              cat $GITHUB_STEP_SUMMARY > summary.md
          done

          # Extract the summary from the GitHub step
          summary=$(cat $GITHUB_STEP_SUMMARY)

          # Generate Global Language Summary
          repo_count=$(grep -cE '^\[```' $GITHUB_STEP_SUMMARY)
          echo "**REPOSITORY PROGRAMMING LANGUAGE SUMMARY**" > lang_sum.md
          echo "" >> lang_sum.md
          echo "**Scanned Repository Count**: $repo_count" >> lang_sum.md
          echo "" >> lang_sum.md
          echo "Languages and Percentages: " >> lang_sum.md
          echo "" >> lang_sum.md
          echo "\`\`\`yml" >> lang_sum.md

          cat $GITHUB_STEP_SUMMARY | awk '
            BEGIN {
              FS=": ";
              OFS=": ";
              total_repos = 0;
              unident_lang = 0;
              null_value = 0;
            }
            /^\[.*\]\(.*\)$/ {
              repo_link = $1;
              sub(/^\[|\]$/,"",repo_link);
              repos[repo_link]++;
              total_repos++;
            }
            /^[a-zA-Z].*: [0-9.]+%$/ {
              language = $1;
              sub(/:.*/,"",language);
              percentage = $2;
              sub(/%.*/,"",percentage);
              languages[language] += percentage;
            }
            /Language not identified/ {
              unident_lang++;
            }
            END {
              print "-- Discovered Repository Count", total_repos;
              print "-- Language Not Identified Repo Count", unident_lang;
              for (language in languages) {
                printf "%s: %.2f%%\n", language, (languages[language] / total_repos);
              }
            }
          ' | sort -k2 -n -r >> lang_sum.md
          echo "" >> lang_sum.md
          echo "\`\`\`" >> lang_sum.md
          cat lang_sum.md > $GITHUB_STEP_SUMMARY
          cat summary.md >> $GITHUB_STEP_SUMMARY

        shell: bash

      - name: Upload CSV
        if: success() && ${{ inputs.csv-gen == true }} 
        id: csv
        uses: actions/upload-artifact@v4
        with:
          name: output.csv
          path: /tmp/output.csv
          # retention-days: 42
